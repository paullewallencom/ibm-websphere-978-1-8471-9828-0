<?xml version="1.0" encoding="UTF-8"?>
<!-- @generated mapFile="com/junglesea/transforms/createShippingLabelRequestMsg_2_createRequestMsg.map" md5sum="4726e8e3aef716e9ac1462459ec8501b" version="7.0.101" -->
<!--
*****************************************************************************
*   This file has been generated by the IBM XML Mapping Editor V7.0.101
*
*   Mapping file:		createShippingLabelRequestMsg_2_createRequestMsg.map
*   Map declaration(s):	createShippingLabelRequestMsg_2_createRequestMsg
*   Input file(s):		smo://smo/name%3Dwsdl-primary/message%3D%257Bhttp%253A%252F%252FSupplierPartnerDomain-v1_0%252Fcom%252Fjunglesea%252Fbusinessservices%252Finterfaces%252FManageShipments%257DcreateShippingLabelRequestMsg/xpath%3D%252Fbody/smo.xsd
*   Output file(s):		smo://smo/name%3Dwsdl-primary/message%3D%257Bhttp%253A%252F%252FAccessServices-Rapid%252Fcom%252Fjunglesea%252Fadapter%252FOutboundRapidFlatFileAdapterImport%257DcreateRequestMsg/xpath%3D%252Fbody/smo.xsd
*
*   Note: Do not modify the contents of this file as it is overwritten
*         each time the mapping model is updated.
*****************************************************************************
-->
<xsl:stylesheet
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xalan="http://xml.apache.org/xslt"
    xmlns:in="http://SupplierPartnerDomain-v1_0/com/junglesea/businessservices/interfaces/ManageShipments"
    xmlns:in2="http://CustomerDomain-v1_0/com/junglesea/bo"
    xmlns:in3="http://SupplierPartnerDomain-v1_0/com/junglesea/bo/msg"
    xmlns:in4="http://CommonDomain-v1_0/com/junglesea/bo"
    xmlns:in6="http://ProductDomain-v1_0/com/junglesea/bo"
    xmlns:in7="http://CustomerDomain-v1_0/com/junglesea/bo/msg"
    xmlns:in8="wsdl.http://SupplierPartnerDomain-v1_0/com/junglesea/businessservices/interfaces/ManageShipments"
    xmlns:in9="http://BillingDomain-v1_0/com/junglesea/bo"
    xmlns:in5="http://SupplierPartnerDomain-v1_0/com/junglesea/bo"
    xmlns:in10="http://CustomerDomain-Msg/com/junglesea/bo"
    xmlns:io="http://www.w3.org/2003/05/soap-envelope"
    xmlns:io3="http://www.ibm.com/xmlns/prod/websphere/mq/sca/6.0.0"
    xmlns:io2="http://www.ibm.com/websphere/sibx/smo/v6.0.1"
    xmlns:out="wsdl.http://AccessServices-Rapid/com/junglesea/adapter/OutboundRapidFlatFileAdapterImport"
    xmlns:io4="http://schemas.xmlsoap.org/ws/2004/08/addressing"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:out2="http://RapidLibrary/com/junglesea/apps/rapid"
    xmlns:io5="http://www.ibm.com/xmlns/prod/websphere/http/sca/6.1.0"
    xmlns:out3="http://AccessServices-Rapid/com/junglesea/adapter/OutboundRapidFlatFileAdapterImport"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns:out4="http://www.ibm.com/xmlns/prod/websphere/j2ca/flatfile/shipping_labelwrapper"
    xmlns:io6="http://www.w3.org/2005/08/addressing"
    xmlns:map="http://AccessServices-Rapid/com/junglesea/transforms/createShippingLabelRequestMsg_2_createRequestMsg"
    exclude-result-prefixes="in in2 in3 in4 in6 in7 in8 in9 in5 in10 map xalan"
    version="1.0">
  <xsl:output method="xml" encoding="UTF-8" indent="no"/>

  <!-- root template  -->
  <xsl:template match="/">
    <xsl:apply-templates select="body" mode="map:createShippingLabelRequestMsg_2_createRequestMsg"/>
  </xsl:template>

  <!-- This rule represents an element mapping: "body" to "body".  -->
  <xsl:template match="body"  mode="map:createShippingLabelRequestMsg_2_createRequestMsg">
    <body>
      <out3:create>
        <out3:createInput>
          <!-- a simple mapping with no associated source:  to "directoryPath"(string) -->
          <directoryPath>
            <xsl:text>C:\tmp\outbound\rapid</xsl:text>
          </directoryPath>
          <!-- a simple data mapping: "in:createShippingLabel/inputParams/CustomerOrder/OrderId"(string) to "fileName"(string) -->
          <xsl:if test="in:createShippingLabel/inputParams/CustomerOrder/OrderId">
            <fileName>
              <xsl:value-of select="concat(in:createShippingLabel/inputParams/CustomerOrder/OrderId, in:createShippingLabel/inputParams/CustomerOrder/OrderItems/PurchasedItem/SKU)"/>
            </fileName>
          </xsl:if>
          <!-- a simple mapping with no associated source:  to "generateUniqueFile"(boolean) -->
          <generateUniqueFile>
            <xsl:text>true</xsl:text>
          </generateUniqueFile>
          <!-- a simple mapping with no associated source:  to "createFileIfNotExists"(boolean) -->
          <createFileIfNotExists>
            <xsl:text>true</xsl:text>
          </createFileIfNotExists>
          <Content>
            <!-- a simple data mapping: "in:createShippingLabel/inputParams/CustomerOrder/BuyerInfo/Party/PartyDetails/Person/Name/FirstName"(string) to "firstName"(string) -->
            <xsl:if test="in:createShippingLabel/inputParams/CustomerOrder/BuyerInfo/Party/PartyDetails/Person/Name/FirstName">
              <firstName>
                <xsl:value-of select="in:createShippingLabel/inputParams/CustomerOrder/BuyerInfo/Party/PartyDetails/Person/Name/FirstName"/>
              </firstName>
            </xsl:if>
            <!-- a simple data mapping: "in:createShippingLabel/inputParams/CustomerOrder/BuyerInfo/Party/PartyDetails/Person/Name/LastName"(string) to "lastName"(string) -->
            <xsl:if test="in:createShippingLabel/inputParams/CustomerOrder/BuyerInfo/Party/PartyDetails/Person/Name/LastName">
              <lastName>
                <xsl:value-of select="in:createShippingLabel/inputParams/CustomerOrder/BuyerInfo/Party/PartyDetails/Person/Name/LastName"/>
              </lastName>
            </xsl:if>
            <!-- a simple data mapping: "in:createShippingLabel/inputParams/CustomerOrder/OrderItems/ShippingAddress/LineOne"(string) to "line1"(string) -->
            <xsl:if test="in:createShippingLabel/inputParams/CustomerOrder/OrderItems/ShippingAddress/LineOne">
              <line1>
                <xsl:value-of select="in:createShippingLabel/inputParams/CustomerOrder/OrderItems/ShippingAddress/LineOne"/>
              </line1>
            </xsl:if>
            <!-- a simple data mapping: "in:createShippingLabel/inputParams/CustomerOrder/OrderItems/ShippingAddress/LineTwo"(string) to "line2"(string) -->
            <xsl:if test="in:createShippingLabel/inputParams/CustomerOrder/OrderItems/ShippingAddress/LineTwo">
              <line2>
                <xsl:value-of select="in:createShippingLabel/inputParams/CustomerOrder/OrderItems/ShippingAddress/LineTwo"/>
              </line2>
            </xsl:if>
            <!-- a simple data mapping: "in:createShippingLabel/inputParams/CustomerOrder/OrderItems/ShippingAddress/PostalCode"(string) to "zipCode"(string) -->
            <xsl:if test="in:createShippingLabel/inputParams/CustomerOrder/OrderItems/ShippingAddress/PostalCode">
              <zipCode>
                <xsl:value-of select="in:createShippingLabel/inputParams/CustomerOrder/OrderItems/ShippingAddress/PostalCode"/>
              </zipCode>
            </xsl:if>
            <!-- a simple data mapping: "in:createShippingLabel/inputParams/CustomerOrder/OrderItems/ShippingAddress/City"(string) to "city"(string) -->
            <xsl:if test="in:createShippingLabel/inputParams/CustomerOrder/OrderItems/ShippingAddress/City">
              <city>
                <xsl:value-of select="in:createShippingLabel/inputParams/CustomerOrder/OrderItems/ShippingAddress/City"/>
              </city>
            </xsl:if>
            <!-- a simple data mapping: "in:createShippingLabel/inputParams/CustomerOrder/OrderItems/ShippingAddress/StateOrProvince"(string) to "state"(string) -->
            <xsl:if test="in:createShippingLabel/inputParams/CustomerOrder/OrderItems/ShippingAddress/StateOrProvince">
              <state>
                <xsl:value-of select="in:createShippingLabel/inputParams/CustomerOrder/OrderItems/ShippingAddress/StateOrProvince"/>
              </state>
            </xsl:if>
            <!-- a simple data mapping: "in:createShippingLabel/inputParams/CustomerOrder/OrderItems/ShippingAddress/Country"(string) to "country"(string) -->
            <xsl:if test="in:createShippingLabel/inputParams/CustomerOrder/OrderItems/ShippingAddress/Country">
              <country>
                <xsl:value-of select="in:createShippingLabel/inputParams/CustomerOrder/OrderItems/ShippingAddress/Country"/>
              </country>
            </xsl:if>
            <!-- a simple data mapping: "in:createShippingLabel/inputParams/CustomerOrder/BuyerInfo/Party/PartyDetails/Person/Contact/Phone"(string) to "contactPhone"(string) -->
            <xsl:if test="in:createShippingLabel/inputParams/CustomerOrder/BuyerInfo/Party/PartyDetails/Person/Contact/Phone">
              <contactPhone>
                <xsl:value-of select="in:createShippingLabel/inputParams/CustomerOrder/BuyerInfo/Party/PartyDetails/Person/Contact/Phone"/>
              </contactPhone>
            </xsl:if>
            <!-- a simple data mapping: "in:createShippingLabel/inputParams/CustomerOrder/OrderItems/ShippingDate"(date) to "shipDate"(date) -->
            <xsl:if test="in:createShippingLabel/inputParams/CustomerOrder/OrderItems/ShippingDate">
              <shipDate>
                <xsl:value-of select="in:createShippingLabel/inputParams/CustomerOrder/OrderItems/ShippingDate"/>
              </shipDate>
            </xsl:if>
            <package>
              <!-- a simple data mapping: "in:createShippingLabel/inputParams/CustomerOrder/OrderItems/PurchasedItem/ProductDetails/ItemWeight"(double) to "weight"(double) -->
              <xsl:if test="in:createShippingLabel/inputParams/CustomerOrder/OrderItems/PurchasedItem/ProductDetails/ItemWeight">
                <weight>
                  <!-- variables for custom code -->
                  <xsl:variable name="ItemWeight" select="in:createShippingLabel/inputParams/CustomerOrder/OrderItems/PurchasedItem/ProductDetails/ItemWeight"/>
                  <xsl:variable name="ItemQuantity" select="in:createShippingLabel/inputParams/CustomerOrder/OrderItems/PurchasedItem/ProductDetails/ItemQuantity"/>
                  <xsl:value-of select="$ItemQuantity * $ItemWeight"/>
                </weight>
              </xsl:if>
            </package>
          </Content>
        </out3:createInput>
      </out3:create>
    </body>
  </xsl:template>

  <!-- *****************    Utility Templates    ******************  -->
  <!-- copy the namespace declarations from the source to the target -->
  <xsl:template name="copyNamespaceDeclarations">
    <xsl:param name="root"/>
    <xsl:for-each select="$root/namespace::*">
      <xsl:copy/>
    </xsl:for-each>
  </xsl:template>
</xsl:stylesheet>
