<?xml version="1.0" encoding="UTF-8"?>
<!-- @generated mapFile="com/junglesea/transforms/ccMakePaymentResponseMsg_2_processPaymentResponseMsg.map" md5sum="2de1be11eee3f7591c82597cc5f38b7e" version="7.0.200" -->
<!--
*****************************************************************************
*   This file has been generated by the IBM XML Mapping Editor V7.0.200
*
*   Mapping file:		ccMakePaymentResponseMsg_2_processPaymentResponseMsg.map
*   Map declaration(s):	ccMakePaymentResponseMsg_2_processPaymentResponseMsg
*   Input file(s):		smo://smo/name%3Dwsdl-primary/message%3D%257Bhttp%253A%252F%252FPayMeLibrary%252Fcom%252Fjunglesea%252Fapps%252Fpayme%252FCardPaymentServices%257DccMakePaymentResponseMsg/xpath%3D%252Fbody/smo.xsd
*   Output file(s):		smo://smo/name%3Dwsdl-primary/message%3D%257Bhttp%253A%252F%252FCustomerDomain-v1_0%252Fcom%252Fjunglesea%252Fbusinessservices%252Finterfaces%252FProcessCustomerPayments%257DprocessPaymentResponseMsg/xpath%3D%252Fbody/smo.xsd
*
*   Note: Do not modify the contents of this file as it is overwritten
*         each time the mapping model is updated.
*****************************************************************************
-->
<xsl:stylesheet
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xalan="http://xml.apache.org/xslt"
    xmlns:in2="http://PayMeLibrary/com/junglesea/apps/payme/CardPaymentServices"
    xmlns:in3="wsdl.http://PayMeLibrary/com/junglesea/apps/payme/CardPaymentServices"
    xmlns:out="http://CustomerDomain-v1_0/com/junglesea/businessservices/interfaces/ProcessCustomerPayments"
    xmlns:io="http://www.w3.org/2003/05/soap-envelope"
    xmlns:io2="http://www.ibm.com/websphere/sibx/smo/v6.0.1"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:out2="http://BillingDomain-Msg/com/junglesea/bo"
    xmlns:out3="wsdl.http://CustomerDomain-v1_0/com/junglesea/businessservices/interfaces/ProcessCustomerPayments"
    xmlns:out4="http://BillingDomain-v1_0/com/junglesea/bo/msg"
    xmlns:out6="http://ProductDomain-v1_0/com/junglesea/bo"
    xmlns:out5="http://CommonDomain-v1_0/com/junglesea/bo"
    xmlns:in="http://PayMeLibrary/com/junglesea/apps/payme"
    xmlns:io3="http://www.ibm.com/xmlns/prod/websphere/mq/sca/6.0.0"
    xmlns:io4="http://schemas.xmlsoap.org/ws/2004/08/addressing"
    xmlns:io5="http://www.ibm.com/xmlns/prod/websphere/http/sca/6.1.0"
    xmlns:out7="http://BillingDomain-v1_0/com/junglesea/bo"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns:io6="http://www.w3.org/2005/08/addressing"
    xmlns:ExsltDatetime="xalan://org.apache.xalan.lib.ExsltDatetime"
    xmlns:map="http://AccessServices-PayMe/com/junglesea/transforms/ccMakePaymentResponseMsg_2_processPaymentResponseMsg"
    exclude-result-prefixes="ExsltDatetime map xalan"
    version="1.0">
  <xsl:output method="xml" encoding="UTF-8" indent="no"/>

  <!-- root template  -->
  <xsl:template match="/">
    <xsl:apply-templates select="body" mode="map:ccMakePaymentResponseMsg_2_processPaymentResponseMsg"/>
  </xsl:template>

  <!-- This rule represents an element mapping: "body" to "body".  -->
  <xsl:template match="body"  mode="map:ccMakePaymentResponseMsg_2_processPaymentResponseMsg">
    <body>
      <out:processPaymentResponse>
        <outputParams>
          <CharacteristicValue>
            <Characteristic>
              <!-- a simple data mapping: "in2:ccMakePaymentResponse/output1/rejection/reasonCode"(string) to "Name"(string) -->
              <Name>
                <xsl:value-of select="in2:ccMakePaymentResponse/output1/rejection/reasonCode"/>
              </Name>
            </Characteristic>
            <!-- a simple data mapping: "in2:ccMakePaymentResponse/output1/rejection/reasonDesc"(string) to "Value"(string) -->
            <xsl:if test="in2:ccMakePaymentResponse/output1/rejection/reasonDesc">
              <Value>
                <xsl:value-of select="in2:ccMakePaymentResponse/output1/rejection/reasonDesc"/>
              </Value>
            </xsl:if>
          </CharacteristicValue>
          <PaymentAcknowledge>
            <!-- a simple data mapping: "in2:ccMakePaymentResponse/output1/confirmationId"(string) to "ReceiptId"(string) -->
            <xsl:if test="in2:ccMakePaymentResponse/output1/confirmationId">
              <ReceiptId>
                <xsl:value-of select="in2:ccMakePaymentResponse/output1/confirmationId"/>
              </ReceiptId>
            </xsl:if>
            <!-- a simple mapping with no associated source:  to "ReceiptDateTime"(dateTime) -->
            <ReceiptDateTime>
              <xsl:value-of select="ExsltDatetime:dateTime()"/>
            </ReceiptDateTime>
            <!-- a simple data mapping: "in2:ccMakePaymentResponse/output1/rejection/action"(string) to "TransactionStatus"(string) -->
            <xsl:if test="in2:ccMakePaymentResponse/output1/rejection/action">
              <TransactionStatus>
                <xsl:value-of select="in2:ccMakePaymentResponse/output1/rejection/action"/>
              </TransactionStatus>
            </xsl:if>
            <!-- a structural mapping: "in2:ccMakePaymentResponse/output1/origRequest"(ccPayRequest) to "OriginalRequest"(anyType) -->
            <xsl:if test="in2:ccMakePaymentResponse/output1/origRequest">
              <OriginalRequest>
                <xsl:attribute name="xsi:type">
                  <xsl:value-of select="'in:ccPayRequest'"/>
                </xsl:attribute>
                <xsl:call-template name="copyNamespaceDeclarations">
                  <xsl:with-param name="root" select="in2:ccMakePaymentResponse/output1/origRequest"/>
                </xsl:call-template>
                <xsl:copy-of select="in2:ccMakePaymentResponse/output1/origRequest/@*|in2:ccMakePaymentResponse/output1/origRequest/node()"/>
              </OriginalRequest>
            </xsl:if>
          </PaymentAcknowledge>
        </outputParams>
      </out:processPaymentResponse>
    </body>
  </xsl:template>

  <!-- *****************    Utility Templates    ******************  -->
  <!-- copy the namespace declarations from the source to the target -->
  <xsl:template name="copyNamespaceDeclarations">
    <xsl:param name="root"/>
    <xsl:for-each select="$root/namespace::*">
      <xsl:copy/>
    </xsl:for-each>
  </xsl:template>
</xsl:stylesheet>
