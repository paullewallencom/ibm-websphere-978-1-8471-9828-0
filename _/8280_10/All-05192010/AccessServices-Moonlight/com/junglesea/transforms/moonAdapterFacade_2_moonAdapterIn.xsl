<?xml version="1.0" encoding="UTF-8"?>
<!-- @generated mapFile="com/junglesea/transforms/moonAdapterFacade_2_moonAdapterIn.map" md5sum="181f975dfb10721ccec40c195387f351" version="7.0.101" -->
<!--
*****************************************************************************
*   This file has been generated by the IBM XML Mapping Editor V7.0.101
*
*   Mapping file:		moonAdapterFacade_2_moonAdapterIn.map
*   Map declaration(s):	moonAdapterFacade_2_moonAdapterIn
*   Input file(s):		smo://smo/name%3Dwsdl-primary/message%3D%257Bhttp%253A%252F%252FMoonlightLibrary%252Fcom%252Fjunglesea%252Fapps%252Fmoonlight%252FProcessPurchaseOrder%257DprocessOrderRequestMsg/xpath%3D%252Fbody/smo.xsd
*   Output file(s):		smo://smo/name%3Dwsdl-primary/message%3D%257Bhttp%253A%252F%252FAccessServices-Moonlight2%252FMoonlightJDBCAdapterImport%257DcreateDb2adminSupplierordersBGRequestMsg/xpath%3D%252Fbody/smo.xsd
*
*   Note: Do not modify the contents of this file as it is overwritten
*         each time the mapping model is updated.
*****************************************************************************
-->
<xsl:stylesheet
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xalan="http://xml.apache.org/xslt"
    xmlns:in="http://MoonlightLibrary/com/junglesea/apps/moonlight/ProcessPurchaseOrder"
    xmlns:in2="wsdl.http://MoonlightLibrary/com/junglesea/apps/moonlight/ProcessPurchaseOrder"
    xmlns:io="http://www.w3.org/2003/05/soap-envelope"
    xmlns:io2="http://www.ibm.com/websphere/sibx/smo/v6.0.1"
    xmlns:out="http://www.ibm.com/xmlns/prod/websphere/j2ca/jdbc/existsresult"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:io3="http://www.ibm.com/xmlns/prod/websphere/mq/sca/6.0.0"
    xmlns:out2="wsdl.http://AccessServices-Moonlight2/MoonlightJDBCAdapterImport"
    xmlns:out3="http://com/ibm/j2ca/fault"
    xmlns:io4="http://schemas.xmlsoap.org/ws/2004/08/addressing"
    xmlns:io5="http://www.ibm.com/xmlns/prod/websphere/http/sca/6.1.0"
    xmlns:out4="http://www.ibm.com/xmlns/prod/websphere/j2ca/jdbc/db2adminsupplierorders"
    xmlns:out5="http://www.ibm.com/xmlns/prod/websphere/bo/6.0.0"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns:out6="http://AccessServices-Moonlight2/MoonlightJDBCAdapterImport"
    xmlns:io6="http://www.w3.org/2005/08/addressing"
    xmlns:out7="http://www.ibm.com/xmlns/prod/websphere/j2ca/jdbc/db2adminsupplierordersbg"
    xmlns:out8="http://com/ibm/j2ca/fault/afcfault"
    xmlns:RandomUtils="xalan://org.apache.commons.lang.math.RandomUtils"
    xmlns:RandomStringUtils="xalan://org.apache.commons.lang.RandomStringUtils"
    xmlns:map="http://AccessServices-Moonlight2/com/junglesea/transforms/moonAdapterFacade_2_moonAdapterIn"
    exclude-result-prefixes="in in2 RandomUtils RandomStringUtils map xalan"
    version="1.0">
  <xsl:output method="xml" encoding="UTF-8" indent="no"/>

  <!-- root template  -->
  <xsl:template match="/">
    <xsl:apply-templates select="body" mode="map:moonAdapterFacade_2_moonAdapterIn"/>
  </xsl:template>

  <!-- This rule represents an element mapping: "body" to "body".  -->
  <xsl:template match="body"  mode="map:moonAdapterFacade_2_moonAdapterIn">
    <body>
      <out6:createDb2adminSupplierordersBG>
        <out6:createDb2adminSupplierordersBGInput>
          <Db2adminSupplierorders>
            <!-- a simple mapping with no associated source:  to "sp_order_id"(string) -->
            <sp_order_id>
              <xsl:value-of select="RandomUtils:nextInt()"/>
            </sp_order_id>
            <!-- a simple data mapping: "in:processOrder/purchaseOrder/@orderDate"(date) to "orderdate"(string) -->
            <orderdate>
              <xsl:value-of select="in:processOrder/purchaseOrder/@orderDate"/>
            </orderdate>
            <!-- a simple data mapping: "in:processOrder/purchaseOrder/shipTo/name"(string) to "shippername"(string) -->
            <xsl:if test="in:processOrder/purchaseOrder/shipTo/name">
              <shippername>
                <xsl:value-of select="in:processOrder/purchaseOrder/shipTo/name"/>
              </shippername>
            </xsl:if>
            <!-- a simple data mapping: "in:processOrder/purchaseOrder/shipTo/street"(string) to "shipperstreet"(string) -->
            <xsl:if test="in:processOrder/purchaseOrder/shipTo/street">
              <shipperstreet>
                <xsl:value-of select="in:processOrder/purchaseOrder/shipTo/street"/>
              </shipperstreet>
            </xsl:if>
            <!-- a simple data mapping: "in:processOrder/purchaseOrder/shipTo/city"(string) to "shippercity"(string) -->
            <xsl:if test="in:processOrder/purchaseOrder/shipTo/city">
              <shippercity>
                <xsl:value-of select="in:processOrder/purchaseOrder/shipTo/city"/>
              </shippercity>
            </xsl:if>
            <!-- a simple data mapping: "in:processOrder/purchaseOrder/shipTo/state"(string) to "shipperstate"(string) -->
            <xsl:if test="in:processOrder/purchaseOrder/shipTo/state">
              <shipperstate>
                <xsl:value-of select="in:processOrder/purchaseOrder/shipTo/state"/>
              </shipperstate>
            </xsl:if>
            <!-- a simple data mapping: "in:processOrder/purchaseOrder/shipTo/zip"(decimal) to "shipperzipcode"(int) -->
            <xsl:if test="in:processOrder/purchaseOrder/shipTo/zip">
              <shipperzipcode>
                <xsl:value-of select="in:processOrder/purchaseOrder/shipTo/zip"/>
              </shipperzipcode>
            </xsl:if>
            <!-- a simple data mapping: "in:processOrder/purchaseOrder/items/item/productName"(string) to "productname"(string) -->
            <xsl:if test="in:processOrder/purchaseOrder/items/item/productName">
              <productname>
                <xsl:value-of select="in:processOrder/purchaseOrder/items/item/productName"/>
              </productname>
            </xsl:if>
            <!-- a simple data mapping: "in:processOrder/purchaseOrder/items/item/@partNum"(SKU) to "partnum"(string) -->
            <xsl:if test="in:processOrder/purchaseOrder/items/item/@partNum">
              <partnum>
                <xsl:value-of select="in:processOrder/purchaseOrder/items/item/@partNum"/>
              </partnum>
            </xsl:if>
            <!-- a simple data mapping: "in:processOrder/purchaseOrder/items/item/quantity"(<positiveInteger>) to "quantity"(int) -->
            <xsl:if test="in:processOrder/purchaseOrder/items/item/quantity">
              <quantity>
                <xsl:value-of select="in:processOrder/purchaseOrder/items/item/quantity"/>
              </quantity>
            </xsl:if>
            <!-- a simple data mapping: "in:processOrder/purchaseOrder/items/item/USPrice"(decimal) to "usprice"(decimal) -->
            <xsl:if test="in:processOrder/purchaseOrder/items/item/USPrice">
              <usprice>
                <xsl:value-of select="in:processOrder/purchaseOrder/items/item/USPrice"/>
              </usprice>
            </xsl:if>
            <!-- a simple data mapping: "in:processOrder/purchaseOrder/items/item/shipDate"(date) to "shipdate"(string) -->
            <xsl:if test="in:processOrder/purchaseOrder/items/item/shipDate">
              <shipdate>
                <xsl:value-of select="in:processOrder/purchaseOrder/items/item/shipDate"/>
              </shipdate>
            </xsl:if>
            <!-- a simple data mapping: "in:processOrder/purchaseOrder/comment"(string) to "comment"(string) -->
            <xsl:if test="in:processOrder/purchaseOrder/comment">
              <comment>
                <xsl:value-of select="in:processOrder/purchaseOrder/comment"/>
              </comment>
            </xsl:if>
          </Db2adminSupplierorders>
        </out6:createDb2adminSupplierordersBGInput>
      </out6:createDb2adminSupplierordersBG>
    </body>
  </xsl:template>

  <!-- *****************    Utility Templates    ******************  -->
  <!-- copy the namespace declarations from the source to the target -->
  <xsl:template name="copyNamespaceDeclarations">
    <xsl:param name="root"/>
    <xsl:for-each select="$root/namespace::*">
      <xsl:copy/>
    </xsl:for-each>
  </xsl:template>
</xsl:stylesheet>
