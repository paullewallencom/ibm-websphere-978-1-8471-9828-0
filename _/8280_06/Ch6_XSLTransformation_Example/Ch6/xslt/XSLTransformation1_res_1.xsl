<?xml version="1.0" encoding="UTF-8"?>
<!-- @generated mapFile="xslt/XSLTransformation1_res_1.map" md5sum="e6213d4f61c0430d0dd4394d6ea0402f" version="7.0.101" -->
<!--
*****************************************************************************
*   This file has been generated by the IBM XML Mapping Editor V7.0.101
*
*   Mapping file:		XSLTransformation1_res_1.map
*   Map declaration(s):	XSLTransformation1_res_1
*   Input file(s):		smo://smo/name%3Dwsdl-primary/message%3D%257Bhttp%253A%252F%252FCh6Library%252Fcom%252Fjunglesea%252Fch6%252Fmediations%252Finterfaces%252FWashingtonCreditAgencyService%257DrequestCreditApprovalResponseMsg/xpath%3D%252Fbody/smo.xsd
*   Output file(s):		smo://smo/name%3Dwsdl-primary/message%3D%257Bhttp%253A%252F%252FCh6Library%252Fcom%252Fjunglesea%252Fch6%252Fmediations%252Finterfaces%252FCreditManagement%257DrequestCreditApprovalResponseMsg/xpath%3D%252Fbody/smo.xsd
*
*   Note: Do not modify the contents of this file as it is overwritten
*         each time the mapping model is updated.
*****************************************************************************
-->
<xsl:stylesheet
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xalan="http://xml.apache.org/xslt"
    xmlns:in="wsdl.http://Ch6Library/com/junglesea/ch6/mediations/interfaces/WashingtonCreditAgencyService"
    xmlns:in2="http://Ch6Library/com/junglesea/ch6/mediations/interfaces/WashingtonCreditAgencyService"
    xmlns:io="http://www.w3.org/2003/05/soap-envelope"
    xmlns:out="wsdl.http://Ch6Library/com/junglesea/ch6/mediations/interfaces/CreditManagement"
    xmlns:io3="http://www.ibm.com/xmlns/prod/websphere/mq/sca/6.0.0"
    xmlns:io2="http://www.ibm.com/websphere/sibx/smo/v6.0.1"
    xmlns:io4="http://schemas.xmlsoap.org/ws/2004/08/addressing"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:io5="http://www.ibm.com/xmlns/prod/websphere/http/sca/6.1.0"
    xmlns:out2="http://Ch6Library/com/junglesea/ch6/mediations/interfaces/CreditManagement"
    xmlns:io6="http://Ch6Library"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns:io7="http://www.w3.org/2005/08/addressing"
    xmlns:map="http://Ch6/xslt/XSLTransformation1_res_1"
    exclude-result-prefixes="in in2 map xalan"
    version="1.0">
  <xsl:output method="xml" encoding="UTF-8" indent="no"/>

  <!-- root template  -->
  <xsl:template match="/">
    <xsl:apply-templates select="body" mode="map:XSLTransformation1_res_1"/>
  </xsl:template>

  <!-- This rule represents an element mapping: "body" to "body".  -->
  <xsl:template match="body"  mode="map:XSLTransformation1_res_1">
    <body>
      <!-- a structural mapping: "in2:requestCreditApprovalResponse"(<Anonymous>) to "out2:requestCreditApprovalResponse"(<Anonymous>) -->
      <xsl:apply-templates select="in2:requestCreditApprovalResponse" mode="localRequestCreditApprovalResponseToRequestCreditApprovalResponse_1813305881"/>
    </body>
  </xsl:template>

  <!-- This rule represents an element mapping: "in2:requestCreditApprovalResponse" to "out2:requestCreditApprovalResponse".  -->
  <xsl:template match="in2:requestCreditApprovalResponse"  mode="localRequestCreditApprovalResponseToRequestCreditApprovalResponse_1813305881">
    <out2:requestCreditApprovalResponse>
      <!-- a structural mapping: "customerCreditApprovalResponse"(CustomerCreditApproval) to "customerCreditApprovalResponse"(CustomerCreditApproval) -->
      <xsl:apply-templates select="customerCreditApprovalResponse" mode="localCustomerCreditApprovalResponseToCustomerCreditApprovalResponse_582212688"/>
    </out2:requestCreditApprovalResponse>
  </xsl:template>

  <!-- This rule represents an element mapping: "customerCreditApprovalResponse" to "customerCreditApprovalResponse".  -->
  <xsl:template match="customerCreditApprovalResponse"  mode="localCustomerCreditApprovalResponseToCustomerCreditApprovalResponse_582212688">
    <customerCreditApprovalResponse>
      <!-- a simple data mapping: "id"(string) to "id"(string) -->
      <xsl:if test="id">
        <id>
          <xsl:value-of select="id"/>
        </id>
      </xsl:if>
      <!-- a simple data mapping: "approvalStatus"(string) to "approvalStatus"(string) -->
      <xsl:if test="approvalStatus">
        <approvalStatus>
          <xsl:value-of select="approvalStatus"/>
        </approvalStatus>
      </xsl:if>
      <!-- a simple data mapping: "approvalCode"(string) to "approvalCode"(string) -->
      <xsl:if test="approvalCode">
        <approvalCode>
          <xsl:value-of select="approvalCode"/>
        </approvalCode>
      </xsl:if>
      <!-- a simple data mapping: "approvalDescription"(string) to "approvalDescription"(string) -->
      <xsl:if test="approvalDescription">
        <approvalDescription>
          <xsl:value-of select="approvalDescription"/>
        </approvalDescription>
      </xsl:if>
      <!-- a simple data mapping: "creditScore"(string) to "creditScore"(string) -->
      <xsl:if test="creditScore">
        <creditScore>
          <xsl:value-of select="creditScore"/>
        </creditScore>
      </xsl:if>
      <!-- a simple data mapping: "ratingAgency"(string) to "ratingAgency"(string) -->
      <xsl:if test="ratingAgency">
        <ratingAgency>
          <xsl:value-of select="ratingAgency"/>
        </ratingAgency>
      </xsl:if>
    </customerCreditApprovalResponse>
  </xsl:template>

  <!-- *****************    Utility Templates    ******************  -->
  <!-- copy the namespace declarations from the source to the target -->
  <xsl:template name="copyNamespaceDeclarations">
    <xsl:param name="root"/>
    <xsl:for-each select="$root/namespace::*">
      <xsl:copy/>
    </xsl:for-each>
  </xsl:template>
</xsl:stylesheet>
